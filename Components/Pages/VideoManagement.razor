@page "/videos"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject IRekaVisionService RekaVisionService
@using LearningTool.Components.Dialog

<PageTitle>Video Management</PageTitle>

<h1>Video Management</h1>

<div style="margin-bottom: 1rem;">
    <FluentButton Appearance="Appearance.Accent" @onclick="OpenAddVideoDialog">
        Add Video
    </FluentButton>
</div>

<FluentDataGrid Id="videogrid" Items="@videos" RowSize="@DataGridRowSize.Large">
    <ChildContent>
        <PropertyColumn Title="Title" Property="@(c => c!.Title ?? string.Empty)" Sortable="true" />

        <TemplateColumn Title="Thumbnail">
                <img src="@(context!.Metadata.Thumbnail)" alt="Thumbnail" style="width: 100px; height: auto;" />
        </TemplateColumn>

        <PropertyColumn Title="Status" Property="@(c => c!.IndexingStatus.ToString() ?? string.Empty)"
            Sortable="true" />
        <PropertyColumn Title="Type" Property="@(c => c!.IndexingType ?? string.Empty)" Sortable="true" />
        <TemplateColumn Title="Actions">
            <FluentButton Appearance="Appearance.Outline" @onclick="@(() => DeleteVideo(context.VideoId))">
                Delete
            </FluentButton>
        </TemplateColumn>
    </ChildContent>
    <EmptyContent>
        <FluentIcon Value="@(new Icons.Filled.Size24.Crown())" Color="@Color.Accent" />&nbsp; Nothing to see here. Carry on!
    </EmptyContent>
</FluentDataGrid>

<AddVideoDialog @bind-Hidden="isDialogHidden" OnVideoAdded="HandleVideoAdded" />

@code {
    private IQueryable<Video>? videos;
    private bool isDialogHidden = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var videoList = await RekaVisionService.GetAllVideos();
            videos = videoList.AsQueryable();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching videos: {ex.Message}");
            videos = new List<Video>().AsQueryable();
        }
    }

    private void OpenAddVideoDialog()
    {
        isDialogHidden = false;
    }

    private async Task HandleVideoAdded(Video newVideo)
    {
        var videoList = await RekaVisionService.GetAllVideos();
        videos = videoList.AsQueryable();
    }

    private async Task DeleteVideo(Guid videoId)
    {
        try
        {
            await RekaVisionService.DeleteVideos(new[] { videoId });

            var videoList = await RekaVisionService.GetAllVideos();
            videos = videoList.AsQueryable();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting video: {ex.Message}");
        }
    }
}
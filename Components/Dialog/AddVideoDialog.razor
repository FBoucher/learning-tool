@using Microsoft.FluentUI.AspNetCore.Components
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons
@using LearningTool.Domain
@using LearningTool.Services

<FluentDialog @ref="addVideoDialog" @bind-Hidden="Hidden" Modal="true" TrapFocus="true" aria-labelledby="dialog-title">
    <FluentDialogHeader ShowDismiss="true">
        <FluentLabel Typo="Typography.PaneHeader" id="dialog-title">
            <FluentIcon Value="@(new Icons.Regular.Size24.VideoAdd())" />&nbsp;
            Add New Video
        </FluentLabel>
    </FluentDialogHeader>

    <FluentDialogBody>
        <div style="display: flex; flex-direction: column; gap: 1rem;">
            <FluentTextField @bind-Value="newVideoUrl" Required="true" Placeholder="Enter video URL"
                Style="width: 100%;">
                <FluentIcon Value="@(new Icons.Regular.Size16.Link())" Slot="start" />
                Video URL
            </FluentTextField>

            <FluentTextField @bind-Value="newVideoName" Required="true" Placeholder="Enter video name"
                Style="width: 100%;">
                <FluentIcon Value="@(new Icons.Regular.Size16.VideoClip())" Slot="start" />
                Video Name
            </FluentTextField>

            <FluentCheckbox @bind-Value="shouldIndexVideo" Label="Index video for search" />

            @if (isAddingVideo)
            {
                <FluentProgressRing Style="width: 20px; height: 20px; margin: 10px auto;" />
                <p style="text-align: center; margin: 0;">Adding video...</p>
            }

            @if (!string.IsNullOrEmpty(addVideoErrorMessage))
            {
                <FluentMessageBar Intent="MessageIntent.Error" AllowDismiss="true"
                    @onclose="() => addVideoErrorMessage = string.Empty">
                    @addVideoErrorMessage
                </FluentMessageBar>
            }
        </div>
    </FluentDialogBody>

    <FluentDialogFooter>
        <FluentButton Appearance="Appearance.Accent"
            Disabled="@(isAddingVideo || string.IsNullOrWhiteSpace(newVideoUrl) || string.IsNullOrWhiteSpace(newVideoName))"
            @onclick="AddVideo">Add Video
        </FluentButton>
        <FluentButton Appearance="Appearance.Neutral" Disabled="@isAddingVideo" @onclick="CloseDialog">
            Cancel
        </FluentButton>
    </FluentDialogFooter>
</FluentDialog>

@code {
    [Parameter]
    public bool Hidden { get; set; }

    [Parameter]
    public EventCallback<bool> HiddenChanged { get; set; }

    [Parameter]
    public EventCallback<Video> OnVideoAdded { get; set; }

    [Inject]
    private IRekaVisionService RekaVisionService { get; set; } = default!;

    private FluentDialog? addVideoDialog;

    private string newVideoUrl = string.Empty;
    private string newVideoName = string.Empty;
    private bool shouldIndexVideo = true;

    private bool isAddingVideo = false;
    private string addVideoErrorMessage = string.Empty;

    private void CloseDialog()
    {
        Hidden = true;
        HiddenChanged.InvokeAsync(Hidden);
    }

    private async Task AddVideo()
    {
        if (string.IsNullOrWhiteSpace(newVideoUrl) || string.IsNullOrWhiteSpace(newVideoName))
        {
            addVideoErrorMessage = "Please provide both video URL and video name.";
            return;
        }

        isAddingVideo = true;
        addVideoErrorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var newVideo = await RekaVisionService.AddVideo(newVideoUrl, newVideoName, shouldIndexVideo);

            await OnVideoAdded.InvokeAsync(newVideo);

            CloseDialog();

            newVideoUrl = string.Empty;
            newVideoName = string.Empty;
            shouldIndexVideo = true;
        }
        catch (Exception ex)
        {
            addVideoErrorMessage = $"Failed to add video: {ex.Message}";
        }
        finally
        {
            isAddingVideo = false;
            StateHasChanged();
        }
    }
}